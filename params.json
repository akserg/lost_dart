{"body":"##Lost Dart\r\n\r\nLost Dart is implementation of Inversion of Control container written on Dart language.\r\n\r\nIt manages dependency injection and dependency management. Its aim is to make wide range of Dart applications easier to:\r\n* Manage source code;\r\n* Encouraging code modularisation;\r\n* Separations of concerns;\r\n* Good unit testing practices.\r\n\r\nMain class in Lost Dart is Container, exposes set of methods using to manage configurations and resolve instance by identifier. The configuration consists of object definitions implemented either in-code or like JSON objects (not implemented yet). Configuration wires the application together.  \r\n\r\n```javascript\r\n// Create IoC container\r\nContainer container = new Container();\r\n\r\n// Create configuration\r\nConfiguration config = new InCodeConfiguration()\r\n  // Add Baz\r\n  ..add(\"baz\", fun(Container container, Map params){\r\n    return new Baz(params[\"name\"]);\r\n  })\r\n  // Add Bar\r\n  ..add(\"bar\", fun(Container container, Map params){\r\n    // Find baz\r\n    Baz baz = container.resolve(\"baz\");\r\n    // Create Bar with constructor injection\r\n    Bar bar = new Bar(baz);\r\n    return bar;\r\n  })\r\n  // Add Foo\r\n  ..add(\"foo\", fun(Container container, Map params){\r\n    // Create Foo\r\n    Foo foo = new Foo();\r\n    // Find bar\r\n    Bar bar = container.resolve(\"bar\");\r\n    // Assign bar to foo - property injection\r\n    foo.bar = bar;\r\n    return foo;\r\n  });\r\n\r\n// Add configuration\r\ncontainer.add(config);\r\n\r\n// Resolve baz\r\nBaz baz = container.resolve(\"baz\");\r\n```\r\n\r\nContainer is not a singleton. Depends on development strategy or business requirements developer might implement set of configurations having relations any kind of complexity.\r\n\r\n###Set up\r\nLost Dart is available under the lost_dart pub package. Simply add a dependency to your pubspec.yaml file:\r\n\r\n```javascript\r\n...\r\ndependencies:\r\n  lost_dart: any\r\n``` \r\n\r\nThen run pub install and you’ll have everything you need to get started.\r\n\r\n##The core concepts of Lost Dart by examples\r\n\r\n###Instantiation\r\n\r\nA simple example of using the Lost Dart is that to construct an instance of an object. \r\n\r\n```javascript\r\n// Somewhere in developing library\r\nclass Baz{\r\n  String name;\r\n  \r\n  Baz([this.name = \"\"]);\r\n}\r\n\r\n// Create IoC container\r\nContainer container = new Container();\r\n\r\n// Configuration\r\nConfiguration config = new InCodeConfiguration()\r\n  // Add Baz\r\n  ..add(\"baz\", fun(Container container, Map params){\r\n    return new Baz();\r\n  });\r\n\r\n// Add configuration\r\ncontainer.add(config);\r\n\r\n// Resolve baz\r\nBaz baz = container.resolve(\"baz\");\r\n\r\n// Test result\r\nassert(baz != null);\r\nassert(baz.name == \"\");\r\n```\r\n\r\n###Constructor injection: Literals arguments\r\n\r\nLiteral values are set in the configuration:\r\n\r\n```javascript\r\n// Configuration\r\nConfiguration config = new InCodeConfiguration()\r\n  // Add Baz\r\n  ..add(\"baz\", fun(Container container, Map params){\r\n    return new Baz(\"Test\");\r\n  });\r\n\r\n// …\r\n\r\n// Test result\r\nassert(baz.name == \"Test\");\r\n```\r\n\r\n###Constructor injection: Using a map of named literals\r\n\r\nDevelopers might specify map of named literals in second argument to be used in class instantiation as constructor arguments: \r\n\r\n```javascript\r\nBaz baz1 = container.resolve(\"baz\", {\"name\":\"Test\"});\r\n```\r\n\r\n###Constructor injection: Dependencies\r\n\r\nA tree of dependencies are instantiated and injected using the configuration:\r\n\r\n```javascript\r\n// application code\r\nclass Baz{\r\n  String name;\r\n  int number = 22;\r\n\r\n  Baz([this.name = \"99\"]);\r\n}\r\n\r\nclass Bar{\r\n  Baz baz;\r\n  Bar(this.baz);\r\n}\r\n\r\n// Create IoC container\r\nContainer container = new Container();\r\n\r\n// Create configuration\r\nConfiguration config = new InCodeConfiguration()\r\n  // Add Baz\r\n  ..add(\"baz\", fun(Container container, Map params){\r\n    return new Baz(params[\"name\"]);\r\n  })\r\n  // Add Bar\r\n  ..add(\"bar\", fun(Container container, Map params){\r\n    // Find baz\r\n    Baz baz = container.resolve(\"baz\");\r\n    // Create Bar with constructor injection\r\n    Bar bar = new Bar(baz);\r\n    return bar;\r\n  });\r\n\r\n// Create IoC container\r\nContainer container = new Container();\r\n\r\n// Add configuration\r\ncontainer.add(config);\r\n\r\n// Resolve baz\r\nBaz baz = container.resolve(\"baz\");\r\n\r\n// Test result of baz\r\nassert(baz != null);\r\nassert(baz.name == \"\");\r\n\r\n// Resolve bar\r\nBar bar = container.resolve(\"bar\");\r\n\r\n// Test result of bar\r\nassert(bar != null);\r\nassert(bar.baz.name == \"\");\r\n```\r\n\r\nAs you seen in previous example to use references to other instances of objects we may ask container to resolve reference on other instance:\r\n\r\n```javascript\r\n// Create configuration\r\nConfiguration config = new InCodeConfiguration()\r\n  // Add Bar\r\n  ..add(\"bar\", fun(Container container, Map params){\r\n  // Find baz\r\n  Baz baz = container.resolve(\"baz\");\r\n  // Create Bar with constructor injection\r\n  Bar bar = new Bar(baz);\r\n  return bar;\r\n})\r\n```\r\n\r\n###Property injection: Literal values\r\n\r\nLiteral values are set in the configuration:\r\n\r\n```javascript\r\n// application code\r\nclass Baz{\r\n  String name;\r\n  int number = 22;\r\n\r\n  Baz([this.name = \"99\"]);\r\n}\r\n\r\n// Create configuration\r\nConfiguration config = new InCodeConfiguration()\r\n  // Add Baz\r\n  ..add(\"baz\", fun(Container container, Map params){\r\n    Baz baz = new Baz(params[\"name\"]);\r\n    Baz.number = 33;\r\n    return baz;\r\n  });\r\n\r\n\r\n// Create IoC container\r\nContainer container = new Container();\r\n// Add configuration\r\ncontainer.add(config);\r\n\r\n// Resolve baz\r\nBaz baz = container.resolve(\"baz\", {\"name\":\"123\"});\r\n\r\n// Test result\r\nassert(baz.name == \"123\");\r\nassert(baz.number == 33);\r\n```\r\n\r\n###Property injection: Dependencies\r\n\r\nA tree of dependencies are instantiated and injected using the configuration:\r\n\r\n```javascript\r\n// application code\r\nclass Baz{\r\n  String name;\r\n  int number = 22;\r\n\r\n  Baz([this.name = \"99\"]);\r\n}\r\n\r\nClass Bar{\r\n  Baz baz;\r\n\r\n  Bar();\r\n}\r\n\r\n// Create configuration\r\nConfiguration config = new InCodeConfiguration()\r\n  // Add Baz\r\n  ..add(\"baz\", fun(Container container, Map params){\r\n    return new Baz(params[\"name\"]);\r\n  })\r\n  // Add Bar\r\n  ..add(\"bar\", fun(Container container, Map params){\r\n    Bar bar = new Bar();\r\n    bar.baz = container.resolve(\"baz\");\r\n    return bar;\r\n  });\r\n\r\n\r\n// Create IoC container\r\nContainer container = new Container();\r\n\r\n// Add configuration\r\ncontainer.add(config);\r\n\r\n// Resolve baz\r\nBaz baz = container.resolve(\"baz\");\r\n\r\n// Resolve bar\r\nBar bar = container.resolve(\"bar\");\r\n\r\n// Test result\r\nassert(baz.baz == baz);\r\n```\r\n\r\n###Object scopes\r\n\r\nLost Dart supports two scopes: singleton and prototype. The first is used by default and does not need to be explicitly specified in the configuration. Objects that use the singleton scope will only be instantiated once.\r\n\r\n```javascript\r\n//application code\r\nclass Baz{\r\n  String name;\r\n  int number = 22;\r\n\r\n  Baz([this.name = \"99\"]);\r\n}\r\n\r\n\r\n// Create configuration\r\nConfiguration config = new InCodeConfiguration()\r\n  // Add Baz\r\n  ..add(\"baz\", fun(Container container, Map params){\r\n    Baz baz = new Baz();\r\n    baz.name = params[\"name\"];\r\n    return baz;\r\n  }, Scope.PROTOTYPE)\r\n  // Add Bar\r\n  ..add(\"bar\", fun(Container container, Map params) {\r\n    return new Bar();\r\n  }\r\n\r\n// Create IoC container\r\nContainer container = new Container();\r\n\r\n// Add configuration\r\ncontainer.add(config);\r\n\r\n// Resolve baz - \"prototype\" scope.\r\nBaz baz = container.resolve(\"baz\");\r\nBaz baz1 = container.resolve(\"baz\");\r\n// Test prototype result\r\nassert(baz != baz1);\r\n\r\n// Resolve bar – \"singleton\" scope\r\nBar bar = container.resolve(\"bar\");\r\nBar bar1 = container.resolve(\"bar\");\r\n// Test prototype result\r\nassert(bar == bar1);\r\n```\r\n\r\n###Factory methods\r\n\r\nFactory methods can be used to generate injected values\r\n\r\n```javascript\r\nNot implemented yet\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Lost dart","tagline":"bla-bla-bla"}